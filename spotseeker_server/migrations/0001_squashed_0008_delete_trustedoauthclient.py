# Generated by Django 2.2.28 on 2023-11-03 23:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re


class Migration(migrations.Migration):

    replaces = [('spotseeker_server', '0001_initial'), ('spotseeker_server', '0002_auto_20181029_2244'), ('spotseeker_server', '0003_auto_20181105_2251'), ('spotseeker_server', '0004_auto_20200702_1932'), ('spotseeker_server', '0005_auto_20230406_2328'), ('spotseeker_server', '0006_auto_20230420_2214'), ('spotseeker_server', '0007_remove_client_access_token'), ('spotseeker_server', '0008_delete_trustedoauthclient')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='SpotType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255)),
                ('client_id', models.CharField(max_length=255)),
                ('client_secret', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('client_credential', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name_plural': 'OAuth Clients',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Spot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=11, null=True)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11, null=True)),
                ('height_from_sea_level', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('building_name', models.CharField(blank=True, max_length=100)),
                ('floor', models.CharField(blank=True, max_length=50)),
                ('room_number', models.CharField(blank=True, max_length=25)),
                ('capacity', models.IntegerField(blank=True, null=True)),
                ('display_access_restrictions', models.CharField(blank=True, max_length=200)),
                ('organization', models.CharField(blank=True, max_length=50)),
                ('manager', models.CharField(blank=True, max_length=50)),
                ('etag', models.CharField(max_length=40)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(blank=True, default=None, max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('spottypes', models.ManyToManyField(blank=True, max_length=50, related_name='spots', to='spotseeker_server.SpotType')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('slug', models.SlugField(blank=True)),
                ('item_category', models.CharField(max_length=50, null=True)),
                ('item_subcategory', models.CharField(max_length=50, null=True)),
                ('spot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Spot')),
            ],
        ),
        migrations.CreateModel(
            name='ItemExtendedInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50)),
                ('value', models.CharField(max_length=350)),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Item')),
            ],
            options={
                'verbose_name_plural': 'Item extended info',
                'unique_together': {('item', 'key')},
            },
        ),
        migrations.CreateModel(
            name='ItemImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=200)),
                ('display_index', models.PositiveIntegerField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='item_images')),
                ('content_type', models.CharField(max_length=40)),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('etag', models.CharField(max_length=40)),
                ('upload_user', models.CharField(max_length=40)),
                ('upload_application', models.CharField(max_length=100)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Item')),
            ],
        ),
        migrations.CreateModel(
            name='SpotAvailableHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('m', 'monday'), ('t', 'tuesday'), ('w', 'wednesday'), ('th', 'thursday'), ('f', 'friday'), ('sa', 'saturday'), ('su', 'sunday')], max_length=3)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('spot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Spot')),
            ],
            options={
                'verbose_name_plural': 'Spot available hours',
            },
        ),
        migrations.CreateModel(
            name='SpotExtendedInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50)),
                ('value', models.CharField(max_length=350)),
                ('spot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Spot')),
            ],
            options={
                'verbose_name_plural': 'Spot extended info',
                'unique_together': {('spot', 'key')},
            },
        ),
        migrations.CreateModel(
            name='SpotImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=200)),
                ('display_index', models.PositiveIntegerField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='space_images')),
                ('content_type', models.CharField(max_length=40)),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('modification_date', models.DateTimeField(auto_now=True)),
                ('etag', models.CharField(max_length=40)),
                ('upload_user', models.CharField(max_length=40)),
                ('upload_application', models.CharField(max_length=100)),
                ('spot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Spot')),
            ],
        ),
    ]
