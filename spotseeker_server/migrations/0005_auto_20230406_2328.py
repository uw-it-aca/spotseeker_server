# Generated by Django 2.2.28 on 2023-04-06 23:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('spotseeker_server', '0004_auto_20200702_1932'),
    ]

    operations = [
        migrations.CreateModel(
            name='SharedSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=16)),
                ('sender', models.CharField(max_length=256)),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Spot')),
            ],
        ),
        migrations.AlterModelOptions(
            name='trustedoauthclient',
            options={'verbose_name_plural': 'Trusted OAuth Clients'},
        ),
        migrations.CreateModel(
            name='SpaceReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.CharField(default='', max_length=1000)),
                ('original_review', models.CharField(default='', max_length=1000)),
                ('rating', models.IntegerField(validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('date_submitted', models.DateTimeField(auto_now_add=True)),
                ('date_published', models.DateTimeField(null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Spot')),
            ],
        ),
        migrations.CreateModel(
            name='SharedSpaceRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash_key', models.CharField(max_length=32)),
                ('recipient', models.CharField(max_length=256)),
                ('user', models.CharField(blank=True, default=None, max_length=16, null=True)),
                ('date_shared', models.DateTimeField(auto_now_add=True)),
                ('shared_count', models.IntegerField()),
                ('date_first_viewed', models.DateTimeField(null=True)),
                ('viewed_count', models.IntegerField()),
                ('shared_space', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.SharedSpace')),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteSpot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spotseeker_server.Spot')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('client_id', models.CharField(max_length=255)),
                ('client_secret', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'OAuth Clients',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
